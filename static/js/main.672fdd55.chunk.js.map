{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","components/App.js","index.js"],"names":["Square","props","className","winner","onClick","value","Board","size","Math","sqrt","squares","length","renderSquare","i","winningSquares","includes","key","board","row","boardRow","col","push","Game","status","nSquares","pow","boardSize","winningCombinations","match","rows","columns","diagonals","threshold","x","diagonal","column","getTicTacToeCombinations","useState","Array","fill","lastMove","history","setHistory","stepNumber","setStepNumber","ascendingOrder","setAscendingOrder","xIsNext","calculateWinner","line","player","boardLine","map","index","set","Set","current","moves","h","step","desc","style","fontWeight","sort","a","b","slice","floor","concat","handleClick","start","App","setBoardSize","setMatch","htmlFor","type","id","name","onChange","e","val","target","parseInt","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.672fdd55.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Square(props) {\n  return (\n    <button\n      className={props.winner ? \"square highlighted\" : \"square\"}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n","import React from \"react\";\nimport Square from \"./Square\";\n\nexport default function Board(props) {\n  const size = Math.sqrt(props.squares.length);\n\n  const renderSquare = (i) => {\n    return (\n      <Square\n        value={props.squares[i]}\n        onClick={() => props.onClick(i)}\n        winner={props.winningSquares ? props.winningSquares.includes(i) : null}\n        key={i}\n      />\n    );\n  };\n\n  const board = [];\n  for (let row = 0; row < size; row++) {\n    let boardRow = [];\n    for (let col = row * size; col < size * (row + 1); col++) {\n      boardRow.push(renderSquare(col));\n    }\n    board.push(\n      <div className=\"board-row\" key={row}>\n        {boardRow}\n      </div>\n    );\n  }\n\n  return <div>{board}</div>;\n}\n","import React, { useState } from \"react\";\nimport Board from \"./Board\";\n\nexport default function Game(props) {\n  const nSquares = Math.pow(props.boardSize, 2);\n\n  const winningCombinations = getTicTacToeCombinations(\n    props.boardSize,\n    props.match\n  );\n\n  const getInitialBoard = () => {\n    return [\n      {\n        squares: Array(Math.pow(props.boardSize, 2)).fill(null),\n        lastMove: [],\n      },\n    ];\n  };\n\n  const [history, setHistory] = useState(getInitialBoard());\n  const [stepNumber, setStepNumber] = useState(0);\n  const [ascendingOrder, setAscendingOrder] = useState(true);\n\n  const xIsNext = () => stepNumber % 2 === 0;\n\n  const calculateWinner = (squares) => {\n    for (let i = 0; i < winningCombinations.length; i++) {\n      const line = winningCombinations[i];\n      const player = squares[line[0]];\n      if (!player) continue;\n      const boardLine = line.map((index) => squares[index]);\n      const set = [...new Set(boardLine)];\n      if (set.length === 1 && set[0] === player)\n        return { player: squares[line[0]], winningSquares: line };\n    }\n    return null;\n  };\n\n  const handleClick = (i) => {\n    const h = history.slice(0, stepNumber + 1);\n    const current = h[h.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) return;\n    squares[i] = xIsNext() ? \"X\" : \"O\";\n    const row = Math.floor(i / props.boardSize);\n    const col = i % props.boardSize;\n    setHistory(\n      h.concat([\n        {\n          squares: squares,\n          lastMove: [row, col],\n        },\n      ])\n    );\n    setStepNumber(h.length);\n  };\n\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n\n  const moves = history.map((h, step) => {\n    const desc = step\n      ? `Go to move #${step} (${h.lastMove[0]}, ${h.lastMove[1]})`\n      : \"Go to game start\";\n    return (\n      <li key={step}>\n        <button\n          style={\n            stepNumber === step\n              ? { fontWeight: \"bold\" }\n              : { fontWeight: \"normal\" }\n          }\n          onClick={() => setStepNumber(step)}\n        >\n          {desc}\n        </button>\n      </li>\n    );\n  });\n\n  if (!ascendingOrder) moves.sort((a, b) => b.key - a.key);\n\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner.player;\n  } else if (nSquares === stepNumber) {\n    status = \"Game ended in a DRAW\";\n  } else {\n    status = \"Next player: \" + (xIsNext() ? \"X\" : \"O\");\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          squares={current.squares}\n          onClick={(i) => handleClick(i)}\n          winningSquares={winner ? winner.winningSquares : null}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div>\n          <i\n            className={ascendingOrder ? \"arrow up\" : \"arrow down\"}\n            onClick={() => setAscendingOrder(!ascendingOrder)}\n          />\n        </div>\n        <div>{status}</div>\n        <ol start={0}>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction getTicTacToeCombinations(size, match) {\n  let rows = [];\n  let columns = [];\n  let diagonals = [];\n  const threshold = size - match;\n\n  for (let col = 0; col < size; col++) {\n    for (let row = 0; row < size; row++) {\n      let x = col + row * size;\n      if (col <= threshold) {\n        let row = [];\n        for (let i = 0; i < match; i++) {\n          row.push(x + i);\n        }\n        rows.push(row);\n        if (row <= threshold) {\n          let diagonal = [];\n          for (let i = 0; i < match; i++) {\n            diagonal.push(x + i + i * size);\n          }\n          diagonals.push(diagonal);\n        }\n      }\n      if (row <= threshold) {\n        let column = [];\n        for (let i = 0; i < match; i++) {\n          column.push(x + i * size);\n        }\n        columns.push(column);\n        if (col >= match - 1) {\n          let diagonal = [];\n          for (let i = 0; i < match; i++) {\n            diagonal.push(x - i + i * size);\n          }\n          diagonals.push(diagonal);\n        }\n      }\n    }\n  }\n\n  return [...rows, ...columns, ...diagonals];\n}\n","import React, { useState } from \"react\";\nimport Game from \"./Game\";\n\nexport default function App() {\n  const [boardSize, setBoardSize] = useState(3);\n  const [match, setMatch] = useState(3);\n\n  const changeBoardSize = (e) => {\n    const val = e.target.value;\n    if (val >= 3) setBoardSize(parseInt(val));\n  };\n\n  const changeMatchCondition = (e) => {\n    const val = e.target.value;\n    if (val >= 3 && val <= boardSize) setMatch(parseInt(val));\n  };\n\n  return (\n    <>\n      <label htmlFor=\"boardSize\">Board Size:</label>\n      <input\n        type=\"number\"\n        id=\"boardSize\"\n        name=\"boardSize\"\n        className=\"size-input\"\n        value={boardSize}\n        onChange={changeBoardSize}\n      />\n      <label htmlFor=\"boardMatch\">Match Condition:</label>\n      <input\n        type=\"number\"\n        id=\"boardMatch\"\n        name=\"boardMatch\"\n        className=\"size-input\"\n        value={match}\n        onChange={changeMatchCondition}\n      />\n      <Game key={`${boardSize},${match}`} boardSize={boardSize} match={match} />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./style/index.css\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}