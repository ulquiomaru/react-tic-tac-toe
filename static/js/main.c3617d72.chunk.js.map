{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","components/App.js","index.js"],"names":["Square","props","className","winner","onClick","value","Board","size","Math","sqrt","squares","length","renderSquare","i","winningSquares","includes","key","board","row","boardRow","col","push","Game","status","nSquares","pow","boardSize","winningCombinations","rows","columns","diagonals","x","getTicTacToeCombinations","useState","Array","fill","lastMove","history","setHistory","stepNumber","setStepNumber","ascendingOrder","setAscendingOrder","xIsNext","calculateWinner","line","a","b","c","player","current","moves","map","h","step","desc","style","fontWeight","sort","slice","floor","concat","handleClick","start","App","setBoardSize","htmlFor","type","id","name","onChange","e","val","target","parseInt","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c3617d72.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Square(props) {\n  return (\n    <button\n      className={props.winner ? \"square highlighted\" : \"square\"}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n","import React from \"react\";\nimport Square from \"./Square\";\n\nexport default function Board(props) {\n  const size = Math.sqrt(props.squares.length);\n\n  const renderSquare = (i) => {\n    return (\n      <Square\n        value={props.squares[i]}\n        onClick={() => props.onClick(i)}\n        winner={props.winningSquares ? props.winningSquares.includes(i) : null}\n        key={i}\n      />\n    );\n  };\n\n  const board = [];\n  for (let row = 0; row < size; row++) {\n    let boardRow = [];\n    for (let col = row * size; col < size * (row + 1); col++) {\n      boardRow.push(renderSquare(col));\n    }\n    board.push(\n      <div className=\"board-row\" key={row}>\n        {boardRow}\n      </div>\n    );\n  }\n\n  return <div>{board}</div>;\n}\n","import React, { useState } from \"react\";\nimport Board from \"./Board\";\n\nexport default function Game(props) {\n  const nSquares = Math.pow(props.boardSize, 2);\n\n  const winningCombinations = getTicTacToeCombinations(props.boardSize);\n\n  const getInitialBoard = () => {\n    return [\n      {\n        squares: Array(Math.pow(props.boardSize, 2)).fill(null),\n        lastMove: [],\n      },\n    ];\n  };\n\n  const [history, setHistory] = useState(getInitialBoard());\n  const [stepNumber, setStepNumber] = useState(0);\n  const [ascendingOrder, setAscendingOrder] = useState(true);\n\n  const xIsNext = () => stepNumber % 2 === 0;\n\n  const calculateWinner = (squares) => {\n    for (let i = 0; i < winningCombinations.length; i++) {\n      const line = winningCombinations[i];\n      const [a, b, c] = line;\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return { player: squares[a], winningSquares: line };\n      }\n    }\n    return null;\n  };\n\n  const handleClick = (i) => {\n    const h = history.slice(0, stepNumber + 1);\n    const current = h[h.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) return;\n    squares[i] = xIsNext() ? \"X\" : \"O\";\n    const row = Math.floor(i / props.boardSize);\n    const col = i % props.boardSize;\n    setHistory(\n      h.concat([\n        {\n          squares: squares,\n          lastMove: [row, col],\n        },\n      ])\n    );\n    setStepNumber(h.length);\n  };\n\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n\n  const moves = history.map((h, step) => {\n    const desc = step\n      ? `Go to move #${step} (${h.lastMove[0]}, ${h.lastMove[1]})`\n      : \"Go to game start\";\n    return (\n      <li key={step}>\n        <button\n          style={\n            stepNumber === step\n              ? { fontWeight: \"bold\" }\n              : { fontWeight: \"normal\" }\n          }\n          onClick={() => setStepNumber(step)}\n        >\n          {desc}\n        </button>\n      </li>\n    );\n  });\n\n  if (!ascendingOrder) moves.sort((a, b) => b.key - a.key);\n\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner.player;\n  } else if (nSquares === stepNumber) {\n    status = \"Game ended in a DRAW\";\n  } else {\n    status = \"Next player: \" + (xIsNext() ? \"X\" : \"O\");\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          squares={current.squares}\n          onClick={(i) => handleClick(i)}\n          winningSquares={winner ? winner.winningSquares : null}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div>\n          <i\n            className={ascendingOrder ? \"arrow up\" : \"arrow down\"}\n            onClick={() => setAscendingOrder(!ascendingOrder)}\n          />\n        </div>\n        <div>{status}</div>\n        <ol start={0}>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction getTicTacToeCombinations(size) {\n  let rows = [];\n  let columns = [];\n  let diagonals = [];\n\n  for (let col = 0; col < size; col++) {\n    for (let row = 0; row < size; row++) {\n      let x = col + row * size;\n      if (col < size - 2) {\n        rows.push([x, x + 1, x + 2]);\n        if (row < size - 2) {\n          diagonals.push([x, x + 1 + 1 * size, x + 2 + 2 * size]);\n        }\n      }\n      if (row < size - 2) {\n        columns.push([x, x + 1 * size, x + 2 * size]);\n        if (col >= 2) {\n          diagonals.push([x, x - 1 + 1 * size, x - 2 + 2 * size]);\n        }\n      }\n    }\n  }\n\n  return [...rows, ...columns, ...diagonals];\n}\n","import React, { useState } from \"react\";\nimport Game from \"./Game\";\n\nexport default function App() {\n  const [boardSize, setBoardSize] = useState(3);\n\n  const changeBoardSize = (e) => {\n    const val = e.target.value;\n    if (val >= 3) setBoardSize(parseInt(val));\n  };\n\n  return (\n    <>\n      <label htmlFor=\"boardSize\">Board Size:</label>\n      <input\n        type=\"number\"\n        id=\"boardSize\"\n        name=\"boardSize\"\n        className=\"size-input\"\n        value={boardSize}\n        onChange={changeBoardSize}\n      />\n      <Game key={boardSize} boardSize={boardSize} />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./style/index.css\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}